{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class GradientGenerator extends Component {\r\n  static propTypes = {\r\n    startColor: PropTypes.string,\r\n    endColor: PropTypes.string,\r\n    steps: PropTypes.number,\r\n    getGradients: PropTypes.func\r\n  };\r\n\r\n  render() {\r\n    const { startColor, endColor, steps } = this.props\r\n    const gradients = this.generateGradient(startColor, endColor, steps)\r\n    if (gradients) {\r\n      this.props.getGradients(gradients)\r\n    } else {\r\n      throw new Error('Cannot generate gradients, make sure start and color are in hex format !')\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  generateGradient(start, end, steps) {\r\n    // parse RGB values to each {Red, Green, Blue} keys\r\n    let startRGB = this.hexToRgb(start)\r\n    let endRGB = this.hexToRgb(end)\r\n    let gradients = []\r\n\r\n    // generate color for each steps provided then push the value to gradients array\r\n    for (let step = 1; step <= steps; step++) {\r\n      let colors = {}\r\n      for (let color of ['red', 'green', 'blue']) {\r\n        colors[color] = this.colorMaker(\r\n          startRGB[color],\r\n          endRGB[color],\r\n          steps,\r\n          step\r\n        )\r\n      }\r\n\r\n      let rgb = `rgb(${colors['red']}, ${colors['green']}, ${colors['blue']})`;\r\n      gradients.push(rgb)\r\n\r\n      // inserting in the dom\r\n      var node = document.createElement('div') // Create a <li> node\r\n      node.style.backgroundColor = rgb\r\n      document.querySelector('body').appendChild(node)\r\n    }\r\n\r\n    return gradients\r\n  }\r\n\r\n  colorMaker(start, end, steps, step) {\r\n    // let redDiff = (start.red > end.red) ? start.red - end.red : end.red - start.red;\r\n\r\n    let val\r\n    if (start > end) {\r\n      let singleStep = (start - end) / steps\r\n      val = start - singleStep * step\r\n    } else if (end > start) {\r\n      let singleStep = (end - start) / steps\r\n      val = start + singleStep * step\r\n    } else {\r\n      val = start | end\r\n    }\r\n\r\n    return ~~val\r\n  }\r\n\r\n  // strng to object converson\r\n  parseRGB(rgb) {\r\n    let baseSplit = rgb.split('(')[1].split(',')\r\n    let red = parseInt(baseSplit[0], 1)\r\n    let green = parseInt(baseSplit[1], 1)\r\n    let blue = parseInt(baseSplit[2].split(')')[0], 1)\r\n\r\n    return { red, green, blue }\r\n  }\r\n\r\n  showGradient(e) {\r\n    let start = this.hexToRgb(this.state.startColor);\r\n    let end = this.hexToRgb(this.state.endColor);\r\n    let gradientColors = this.generateGradient(start, end, this.state.steps);\r\n    this.setState({ gradientColors: gradientColors });\r\n  }\r\n\r\n  hexToRgb(hex) {\r\n    let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result\r\n      ? {\r\n          red: parseInt(result[1], 16),\r\n          green: parseInt(result[2], 16),\r\n          blue: parseInt(result[3], 16)\r\n        }\r\n      : null;\r\n  }\r\n}\r\n"],"names":["GradientGenerator","props","startColor","endColor","steps","gradients","generateGradient","getGradients","Error","start","end","startRGB","hexToRgb","endRGB","step","colors","color","colorMaker","rgb","push","node","document","createElement","style","backgroundColor","querySelector","appendChild","val","singleStep","baseSplit","split","red","parseInt","green","blue","e","state","gradientColors","setState","hex","result","exec","Component","propTypes","PropTypes","string","number","func"],"mappings":"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"}